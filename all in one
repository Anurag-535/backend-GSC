I'll help you prepare a backend solution for your Feed a Life project. I'll create a comprehensive backend implementation using Node.js, Express, and MongoDB. I'll also provide detailed setup instructions.

```markdown
# Feed a Life - Backend Setup

## Project Structure
```
feed-a-life-backend/
│
├── config/
│   ├── database.js
│   └── multer.js
│
├── controllers/
│   ├── authController.js
│   ├── donationController.js
│   ├── restaurantController.js
│   └── userController.js
│
├── middleware/
│   ├── authMiddleware.js
│   └── validationMiddleware.js
│
├── models/
│   ├── Donation.js
│   ├── Restaurant.js
│   └── User.js
│
├── routes/
│   ├── authRoutes.js
│   ├── donationRoutes.js
│   ├── restaurantRoutes.js
│   └── userRoutes.js
│
├── utils/
│   ├── geocoding.js
│   └── validation.js
│
├── .env
├── app.js
├── package.json
└── README.md
```

## Prerequisites
- Node.js (v16+ recommended)
- MongoDB Atlas account
- Google Cloud Platform account (for additional features)

## Setup Steps

1. Initialize Project
```bash
mkdir feed-a-life-backend
cd feed-a-life-backend
npm init -y
```

2. Install Dependencies
```bash
npm install express mongoose dotenv bcryptjs jsonwebtoken cors helmet
npm install -D nodemon
```

3. MongoDB Configuration
Create a `.env` file in the root directory:
```
MONGODB_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret_key
GOOGLE_MAPS_API_KEY=your_google_maps_api_key
PORT=5000
```

4. Backend Features
- User Authentication (JWT)
- Restaurant Registration
- Food Donation Management
- Geolocation Services
- Advanced Search Capabilities

## Running the Project
```bash
# Development mode
npm run dev

# Production mode
npm start
```

## Deployment Recommendations
- Use MongoDB Atlas for database hosting
- Deploy on Google Cloud Run or Firebase
- Set up CI/CD with GitHub Actions
```

## Core Configuration Files

```

Now, I'll provide the detailed implementation for the backend:

```javascript
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const authRoutes = require('./routes/authRoutes');
const donationRoutes = require('./routes/donationRoutes');
const restaurantRoutes = require('./routes/restaurantRoutes');

const app = express();

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Database Connection
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('MongoDB Connected Successfully'))
.catch((err) => console.error('MongoDB Connection Error:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/donations', donationRoutes);
app.use('/api/restaurants', restaurantRoutes);

// Error Handling Middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        message: 'Something went wrong!',
        error: process.env.NODE_ENV === 'production' ? {} : err.stack
    });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

module.exports = app;

```

```javascript
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true
    },
    password: {
        type: String,
        required: true
    },
    userType: {
        type: String,
        enum: ['restaurant', 'ngo', 'individual'],
        required: true
    },
    location: {
        type: {
            type: String,
            default: 'Point'
        },
        coordinates: {
            type: [Number],
            default: [0, 0]
        }
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

// Hash password before saving
UserSchema.pre('save', async function(next) {
    if (this.isModified('password')) {
        this.password = await bcrypt.hash(this.password, 10);
    }
    next();
});

// Method to check password
UserSchema.methods.comparePassword = async function(candidatePassword) {
    return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', UserSchema);

```

```javascript
const mongoose = require('mongoose');

const DonationSchema = new mongoose.Schema({
    donor: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    category: {
        type: String,
        enum: ['vegetarian', 'non-vegetarian', 'vegan', 'bakery'],
        required: true
    },
    description: {
        type: String,
        required: true,
        trim: true
    },
    quantity: {
        type: Number,
        required: true,
        min: 1
    },
    pickupTime: {
        type: Date,
        required: true
    },
    location: {
        type: {
            type: String,
            default: 'Point'
        },
        coordinates: {
            type: [Number],
            required: true
        }
    },
    status: {
        type: String,
        enum: ['available', 'reserved', 'donated'],
        default: 'available'
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

// Geospatial indexing
DonationSchema.index({ location: '2dsphere' });

module.exports = mongoose.model('Donation', DonationSchema);

```

```javascript
const User = require('../models/User');
const jwt = require('jsonwebtoken');

exports.register = async (req, res) => {
    try {
        const { name, email, password, userType } = req.body;

        // Check if user already exists
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        // Create new user
        const user = new User({
            name,
            email,
            password,
            userType
        });

        await user.save();

        // Generate JWT token
        const token = jwt.sign(
            { id: user._id, email: user.email }, 
            process.env.JWT_SECRET, 
            { expiresIn: '1h' }
        );

        res.status(201).json({ 
            message: 'User registered successfully', 
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                userType: user.userType
            }
        });
    } catch (error) {
        res.status(500).json({ message: 'Registration failed', error: error.message });
    }
};

exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;

        // Find user
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Check password
        const isMatch = await user.comparePassword(password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Generate JWT token
        const token = jwt.sign(
            { id: user._id, email: user.email }, 
            process.env.JWT_SECRET, 
            { expiresIn: '1h' }
        );

        res.json({ 
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                userType: user.userType
            }
        });
    } catch (error) {
        res.status(500).json({ message: 'Login failed', error: error.message });
    }
};

```

Here's a comprehensive README with additional details:



# Feed a Life - Backend

## Project Description
Feed a Life is a platform designed to reduce food waste by connecting restaurants with surplus food to individuals and organizations in need.

## Features
- User Authentication (JWT)
- Restaurant Registration
- Food Donation Management
- Geolocation-based Food Tracking
- Advanced Search Capabilities

## Technology Stack
- Node.js
- Express.js
- MongoDB
- Mongoose
- JWT for Authentication
- Bcrypt for Password Hashing
- Helmet for Security
- Cors for Cross-Origin Resource Sharing

## Getting Started

### Prerequisites
- Node.js (v16+)
- MongoDB Atlas Account
- Google Cloud Platform Account (Optional)

### Installation Steps
1. Clone the repository
2. Install dependencies
```bash
npm install
```

3. Create a `.env` file with:
```
MONGODB_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret_key
GOOGLE_MAPS_API_KEY=your_google_maps_api_key
PORT=5000
```

### Running the Application
```bash
# Development Mode
npm run dev

# Production Mode
npm start
```

## API Endpoints

### Authentication
- `POST /api/auth/register`: User Registration
- `POST /api/auth/login`: User Login

### Donations
- `POST /api/donations`: Create Donation
- `GET /api/donations`: List Donations
- `GET /api/donations/search`: Search Donations

### Restaurants
- `POST /api/restaurants`: Register Restaurant
- `GET /api/restaurants`: List Restaurants

## Deployment
- Recommended Platforms: 
  - Google Cloud Run
  - Firebase
  - Heroku

## Google Solution Challenge Alignment
- Reduces Food Waste
- Supports UN Sustainable Development Goals
- Uses Geolocation for Efficient Food Distribution
- Promotes Community Collaboration

## Contributing
1. Fork the Repository
2. Create Feature Branch
3. Commit Changes
4. Push to Branch
5. Create Pull Request

## License
MIT License


Now, let me explain the key aspects of this backend implementation:

### Architecture and Features
1. Modular Structure: Organized into models, controllers, routes, and middleware
2. User Authentication with JWT
3. Donation Management with Geospatial Indexing
4. Security Middleware (Helmet, CORS)
5. Error Handling
6. Environment Configuration

### Key Improvements
- Secure password hashing
- JWT-based authentication
- Geospatial donation tracking
- Robust error handling
- Scalable architecture

### Next Steps for Google Solution Challenge
1. Implement advanced search and filter capabilities
2. Add machine learning for food waste prediction
3. Create dashboard for impact tracking
4. Integrate with Google Maps API for enhanced location services

### Recommended Enhancements
- Add email verification
- Implement rate limiting
- Create more comprehensive validation
- Add logging mechanism

To integrate with your existing frontend:
1. Update frontend fetch/axios calls to use new API endpoints
2. Handle JWT token in frontend storage (localStorage/sessionStorage)
3. Add interceptors for token management

Would you like me to elaborate on any specific aspect of the backend implementation or discuss integration strategies with your frontend?
